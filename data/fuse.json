{"keys":[{"path":["title"],"id":"title","weight":1,"src":"title"},{"path":["body"],"id":"body","weight":1,"src":"body"}],"records":[{"i":0,"$":{"0":{"v":"This page has not yet sprouted","n":0.408},"1":{"v":"[Dendron](https://dendron.so/) (the tool used to generate this site) lets authors selective publish content. You will see this page whenever you click on a link to an unpublished page\n\n![](https://foundation-prod-assetspublic53c57cce-8cpvgjldwysl.s3-us-west-2.amazonaws.com/assets/images/not-sprouted.png)","n":0.189}}},{"i":1,"$":{"0":{"v":"Root","n":1},"1":{"v":"\n# My notes (@binarystag)\n\n[LinkedIn](https://www.linkedin.com/in/aaron-deas-ba9908166/)\n[Github](https://github.com/b00000001)\n\n### Sections:\n\n1. [TypeScript](./Typescript.md)\n2. [Testing](./Testing)\n3. [Database](./Database)\n4. [Gaming](./Gaming)\n5. [Data Structures](./Data_Structures)\n","n":0.302}}},{"i":2,"$":{"0":{"v":"root","n":1},"1":{"v":"\n# Aaron Deas (My Notebook)\n\n### Sections:\n\n1. [Process Distillery](./Process_Distillery)\n2. [TypeScript Info](./Typescript.md)\n3. [Testing](./Testing)\n4. [Database](./Database)\n5. [Gaming](./Gaming)\n6. [Data Structures](./Data_Structures)\n","n":0.258}}},{"i":3,"$":{"0":{"v":"Typescript","n":1},"1":{"v":"\n# Typescript\n\n## Contents\n\n1. [[AppSetup|Typescript.AppSetup]]\n2. [Types](./Typescript.types.md)\n","n":0.447}}},{"i":4,"$":{"0":{"v":"Types","n":1},"1":{"v":"\n## **<a id='Contents'>Contents</a>**\n\n1. [Unions](#Unions)\n2. [Booleans](#Booleans)\n3. [Strings](#Strings)\n4. [Arrays](#Arrays)\n5. [Tuple](#Tuple)\n6. [Enum](#Enum)\n7. [Unknown](#Unknown)\n8. [Any](#Any)\n9. [Void](#Void)\n10. [Null](#Null)\n11. [Never](#Never)\n12. [Object](#Object)\n\n### **<a id='Tips'>Tips</a>**\n\n**1. To learn the type of a variable, use typeof**\n\n```\nimport axios from 'axios';\n(async () => {\n    const data = await axios.get('https://pokeapi.co/api/v2/pokemon/1');\nconsole.log(data.data.species, typeof data.data.species.name);\n})();\n```\n\n### Output\n\n```\n{\n     name: 'bulbasaur',\n     url: 'https://pokeapi.co/api/v2/pokemon-species/1/'\n}\nstring\n```\n\n---\n\n### **<a id='Unions'>Unions</a>**\n\nWith a union, you can declare that a type could be one of many types. For example, you can describe a boolean type as being either true or false:\n\n`type MyBool = true | false;`\n\nNote: If you hover over MyBool, you’ll see that it is classed as boolean. That’s a property of the Structural Type System. More on this below.\n\nA popular use-case for union types is to describe the set of string or number literals that a value is allowed to be:\n\n```\ntype WindowStates = \"open\" | \"closed\" | \"minimized\";\ntype LockStates = \"locked\" | \"unlocked\";\ntype PositiveOddNumbersUnderTen = 1 | 3 | 5 | 7 | 9;\n```\n\n#### [Top](#Contents)\n\n---\n\n### **<a id='Boolean'>Booleans</a>**\n\n---\n\n#### Declaration\n\n```\nlet tired: boolean = true;\n```\n\n#### Usage\n\n```\n(() => {\n    let tired: boolean = true;\n    if(tired){\n        console.log(\"I am tired\");\n    } else {\n        console.log(`I'm not that tired!`)\n    }\n})()\n\n```\n\n#### [Top](#Contents)\n\n---\n\n### **<a id='Strings'>Strings</a>**\n\n---\n\n#### Declaration\n\n```\nlet name: string = 'Aaron';\n```\n\n#### Usage\n\n```\n(() => {\n    let name: string = 'Aaron';\n    console.log(name);\n})()\n```\n\n#### [Top](#Contents)\n\n### **<a id='Arrays'>Arrays</a>**\n\n---\n\n#### Declaration\n\n```\nlet names: string[] = ['Aaron', 'Eric'];\n```\n\n#### Usage\n\n```\n(() => {\n    let names: string[] = ['Aaron', 'Eric', 'John', 'Michael'];\n    console.log(names);\n})()\n```\n\n- You can also use generic array types ie:\n\n```\n(() => {\n    let names: Array<string> = ['Aaron', 'Eric', 'John', 'Michael'];\n    console.log(names);\n})()\n```\n\n#### [Top](#Contents)\n\n---\n\n### **<a id='Tuple'>Tuple</a>**\n\n---\n\n#### Declaration\n\n```\nlet x: [string, string, number];\n```\n\n#### Usage\n\n```\n(() => {\n    let x: [string, string, number];\n    x = [\"New Year\", 'Sunday', 31];\n    console.log(x);\n})()\n```\n\n#### [Top](#Contents)\n\n---\n\n### **<a id='Enum'>Enum</a>**\n\n---\n\n#### Declaration\n\n- An enum is a way of giving more friendly names to sets of numeric values. (numeric values will default if not implicitly set)\n\n```\nenum SaiyanLevel {\n    SSJ = 1, //1\n    SSJ2, //2\n    SSJ3 //3\n}\n```\n\n### Usage\n\n```\n(() => {\n    enum SaiyanLevels {\n        SSJ,\n        SSJ2,\n        SSJ3,\n        SSJ4,\n    }\n    let s:SaiyanLevels = SaiyanLevels.SSJ4;\n    console.log(s);\n})()\n```\n\n#### Output:\n\n```\n4\n```\n\n- You are also able to print the name of a specific value of an enum.\n\n```\n(() => {\n    enum SaiyanLevels {\n        SSJ,\n        SSJ2,\n        SSJ3,\n        SSJ4,\n    }\n    let s:string = SaiyanLevels[3];\n    console.log(s);\n})()\n```\n\n### Output\n\n```\nSSJ4\n```\n\n#### [Top](#Contents)\n\n---\n\n### <a id='Unknown'>**Unknown**</a>\n\n---\n\nFor variables that the type is unknown\n\n#### Declaration\n\n```\nconst value: unknown = 5;\n```\n\n#### Usage\n\n```\n(() => {\n  const value: unknown = 5;\n  console.log(value);\n})();\n\n```\n\n### Output\n\n```\n5\n```\n\n#### [Top](#Contents)\n\n---\n\n### <a id='Any'>**Any**</a>\n\n---\n\n#### Declaration\n\n```\nlet name: any = 'Din Djarin';\n```\n\n#### Usage\n\n```\n(() => {\n  let mandoParty: any = {\n    leader: 'Din Djarin',\n    members: ['Grogu', 'Ahsoka']\n  };\n\n  /*   None of the following lines of code will throw compiler errors.\n  Using `any` disables all further type checking, and it is assumed\n  you know the environment better than TypeScript. */\n\n  mandoParty.foo(); // method does not exist, just here for example.\n  mandoParty.transportation = 'ship';\n  const test: number = mandoParty;\n})();\n```\n\n#### [Top](#Contents)\n\n---\n\n### <a id='Void'>**Void**</a>\n\n---\n\nVoid type is a function which returns `undefined` or has no return value\n\n#### Declaration\n\n```\nconst value: void = undefined;\n\n```\n\n#### Usage\n\n```\n(() => {\n  const value: void = undefined;\n  const value: void = 1; // error\n  console.log(value);\n})();\n\n```\n\n### Output\n\n```\nundefined\n```\n\n#### [Top](#Contents)\n\n---\n\n### <a id='Null'>**Null**</a>\n\n---\n\n#### Declaration\n\n```\nconst value: null = null;\n```\n\n#### Usage\n\n```\n(() => {\n  const value: null = null;\n  console.log(value);\n})();\n\n```\n\n### Output\n\n```\nnull\n```\n\n#### [Top](#Contents)\n\n---\n\n### <a id='Never'>**Never**</a>\n\nIt’s not possible that this type could happen\n\n- The never type is used when you are sure that something is never going to occur. For example, you write a function which will not return to its end point or always throws an exception.\n\n#### Declaration\n\n```\nconst neverFunc = (): never => {\n  throw new Error('never');\n};\n```\n\n#### [Top](#Contents)\n\n---\n\n### <a id='Object'>**Object**</a>\n\n---\n\n#### Declaration\n\n```\nlet myObject: object;\nmyObject = {\n    name: 'Luke Skywalker',\n    alignment: 'Light Side'\n  };\n\n```\n\n#### Usage\n\n```\n(() => {\n  let myObject: object;\n\n  myObject = {\n    name: 'Luke Skywalker',\n    alignment: 'Light Side'\n  };\n  console.log(myObject);\n})();\n```\n\n### Note\n\nTo explicitly specify properties of the `employee` object, you first use the following syntax to declare the myObject object.\n\n```\nlet myObject: {\n    name: string;\n    alignment: string;\n    };\n// then assign the myObject object to a literal object with the appropriate properties.\n\n    myObject = {\n    name: 'Luke Skywalker',\n    alignment: 'Light Side'\n    };\n\n```\n\n### Or\n\n```\nlet myObject: {\n    name: string;\n    alignment: string;\n    } = {\n    name: 'Luke Skywalker',\n    alignment: 'Light Side'\n    };\n```\n\n#### [Top](#Contents)\n\n---\n\n### **[Back](./Typescript.md)**\n","n":0.039}}},{"i":5,"$":{"0":{"v":"AppSetup","n":1},"1":{"v":"\n1. Create a new project\n2. install typescript `npm install typescript`\n3. run tsc --init to create a tsconfig file.\n4. edit tsconfig (generally edit outdir as this will determine what directory your compiled files are placed in the naming convention is generally dist/. Also edit sourcedir, this will pinpoint where your source files are located.)\n5. run [tsc](https://www.typescriptlang.org/docs/handbook/compiler-options.html) to compile your source files or run tsc -w to have compiler run in watch mode.\n\n[[Back|Typescript]]\n","n":0.119}}},{"i":6,"$":{"0":{"v":"Testing","n":1},"1":{"v":"\n### Jest\n\n1. [[Jest|Testing.Jest]]\n2. [[Supertest|Testing.Supertest]]\n","n":0.5}}},{"i":7,"$":{"0":{"v":"Supertest","n":1},"1":{"v":"\nSuper test is used in conjunction with JEST or on it's own to test http requests.\n\n- once installed, it can be used and referenced by calling `require('supertest')`\n\n### Installation\n\n`npm install supertest`\n\n### Setup\n\n- create normal expres app\n- be sure to create `__tests__` folder, this seems to be what JEST needs to run testing. (You can run supertest without jest but issues are reported in normal error messages as opposed to jest style message).\n- create a file with the convention `(FILENAME).test.js`\n- if testing expres, export the app component\n  `export const app = express();`\n- import app object into test.js file `const { app } = require('../../dist/src/index.js');`\n- sample app using supertest with no test suites\n\n```const request = require('supertest');\nconst assert = require('assert');\nconst express = require('express');\n\nconst app = express();\n\napp.get('/user', function(req, res) {\n  res.status(200).json({ name: 'john' });\n});\n\nrequest(app)\n  .get('/user')\n  .expect('Content-Type', /json/)\n  .expect('Content-Length', '15')\n  .expect(200)\n  .end(function(err, res) {\n    if (err) throw err;\n  });\n```\n\n### API Guide\n\nAPI\nYou may use any superagent methods, including .write(), .pipe() etc and perform assertions in the .end() callback for lower-level needs.\n\n- **.expect(status[, fn])**\n  Assert response status code.\n\n- **.expect(status, body[, fn])**\n  Assert response status code and body.\n\n- **.expect(body[, fn])**\n  Assert response body text with a string, regular expression, or parsed body object.\n\n- **.expect(field, value[, fn])**\n  Assert header field value with a string or regular expression.\n\n- **.expect(function(res) {})**\n  Pass a custom assertion function. It'll be given the response object to check. If the check fails, throw an error.\n\n```\nrequest(app)\n  .get('/')\n  .expect(hasPreviousAndNextKeys)\n  .end(done);\n\nfunction hasPreviousAndNextKeys(res) {\n  if (!('next' in res.body)) throw new Error(\"missing next key\");\n  if (!('prev' in res.body)) throw new Error(\"missing prev key\");\n}\n```\n\n- **.end(fn)**\n  Perform the request and invoke fn(err, res).\n\n[[Back|Testing]]\n","n":0.062}}},{"i":8,"$":{"0":{"v":"Jest","n":1}}},{"i":9,"$":{"0":{"v":"Gaming","n":1},"1":{"v":"\n### Game Notes\n\n","n":0.577}}},{"i":10,"$":{"0":{"v":"Incremental Game Brainstorming","n":0.577},"1":{"v":"\n## Economy\n- Based on amount of bodies in posession\n- Mass effects how much a body yields.\n- Ecomony mis mineral bsed\n\n## Example of data that can be used\n```\n\"bodies\": [\n    {\n      \"id\": \"lune\",\n      \"name\": \"La Lune\",\n      \"englishName\": \"Moon\",\n      \"isPlanet\": false,\n      \"moons\": null,\n      \"semimajorAxis\": 384400,\n      \"perihelion\": 363300,\n      \"aphelion\": 405500,\n      \"eccentricity\": 0.0549,\n      \"inclination\": 5.145,\n      \"mass\": {\n        \"massValue\": 7.346,\n        \"massExponent\": 22\n      },\n      \"vol\": {\n        \"volValue\": 2.1968,\n        \"volExponent\": 10\n      },\n      \"density\": 3.344,\n      \"gravity\": 1.62,\n      \"escape\": 2380,\n      \"meanRadius\": 1737,\n      \"equaRadius\": 1738.1,\n      \"polarRadius\": 1736,\n      \"flattening\": 0.0012,\n      \"dimension\": \"\",\n      \"sideralOrbit\": 27.3217,\n      \"sideralRotation\": 655.728,\n      \"aroundPlanet\": {\n        \"planet\": \"terre\",\n        \"rel\": \"https://api.le-systeme-solaire.net/rest/bodies/terre\"\n      },\n      \"discoveredBy\": \"\",\n      \"discoveryDate\": \"\",\n      \"alternativeName\": \"\",\n      \"axialTilt\": 6.68,\n      \"avgTemp\": 0,\n      \"mainAnomaly\": 0,\n      \"argPeriapsis\": 0,\n      \"longAscNode\": 0,\n      \"bodyType\": \"Moon\",\n      \"rel\": \"https://api.le-systeme-solaire.net/rest/bodies/lune\"\n    },\n    ```\n    ### Important fields\n    ```\n    englishName\n    isPlanet\n    moons\n    mass\n    gravity\n    avgTemp\n    ```","n":0.09}}},{"i":11,"$":{"0":{"v":"Final Fantasy Series","n":0.577},"1":{"v":"\n1. Final Fantasy 3\n2. Final Fantasy 7\n3. Final fantasy 8\n4. Final Fantasy 10\n5. Final Fantasy 12\n6. Final Fantasy 13","n":0.229}}},{"i":12,"$":{"0":{"v":"Final Fantasy 7","n":0.577},"1":{"v":"### Contents\n- Character Strength chart. 1 = Best, 9 = Worst\n\n\n| Stat  |Cloud   | Barret   | Tifa    | Aeris |RedXIII|CaitSith|  Cid |Yuffie |Vincent|\n|-------|--------|----------|---------|-------|-------|-------|-------|-------|-------|\n|  HP   |3       |1         |6        |8      |2      |5      |4      |7      |9      |\n|  MP   |3       |9         |6        |1      |5      |4      |8      |7      |2      |\n|  Str  |1       |2         |3        |9      |5      |7      |4      |6      |8      |\n|  Vit  |3       |1         |5        |7      |4      |8      |2      |5      |8      |\n|  Dex  |4       |9         |3        |6      |1      |6      |5      |2      |6      |\n|  Mag  |2       |9         |7        |1      |6      |3      |8      |5      |3      |\n| Spirit|2       |9         |5        |1      |5      |2      |8      |7      |2      |\n| Luck  |5       |8         |2        |6      |6      |2      |8      |1      |2      |\n\n\n","n":0.095}}},{"i":13,"$":{"0":{"v":"Database","n":1},"1":{"v":"\n### SQL\n\n1. [[Mysql|Database.Mysql]]\n2. [[MSSQL|Database.MSSQL]]\n","n":0.5}}},{"i":14,"$":{"0":{"v":"Mysql","n":1},"1":{"v":"\n[[Back|Database]]\n","n":1}}},{"i":15,"$":{"0":{"v":"MSSQL","n":1},"1":{"v":"\nInstallation\n`npm install mssql`\n\n[[Back|Database]]\n","n":0.577}}},{"i":16,"$":{"0":{"v":"Data_Structures","n":1},"1":{"v":"\n### Data Structures\n- A data structure is the organization of data in such a way that it can be used efficiently.\n\n1. [[Arrays|Data_Structures.Arrays]]\n2. [Stack](./Stack)\n3. [Linked Lists](./Linked_Lists)\n4. [Binary Trees](./Binary_Trees)\n5. [Trees](./Trees)\n6. [Graphs](./Graphs)\n7. [Hash Tables](./Hash_Trees)\n","n":0.18}}},{"i":17,"$":{"0":{"v":"Stack","n":1},"1":{"v":"\n### Stack\n\n- Stack is a data structure that is an array where the first item in is the first item out. Similar to a stack of plates.\n\n#### Functions\n\n- push, pop, peek, length\n  <br>\n  The JavaScript array object `new Array()` already has all the functions to use an Array as a stack.\n\n  - push: Adds an item to the top of the stack.\n  - pop: Removes an item from the top of the stack.\n  - peek: Returns the item at the top of the stack without removing it.\n  - length: Returns the number of items in the stack.\n","n":0.102}}},{"i":18,"$":{"0":{"v":"Concepts","n":1}}},{"i":19,"$":{"0":{"v":"Fibonacci Study","n":0.707},"1":{"v":"\n### Fibonacci Algorithm\n\n```const fib: (n: number) => number = (n) => {\n    if (n <= 2) return 1;\n    return fib(n - 1) + fib(n - 2);\n}\n```\n\nExample of recursive function that will calculate the nth position of the fibonacci sequence.\n","n":0.16}}},{"i":20,"$":{"0":{"v":"Arrays","n":1},"1":{"v":"\nAn array is a collection of items.\n\n    `let arr = [1, 2, 3, 4, 5];`\n\nAn array can hold any data type (string, number, boolean, etc.)\n\n### Array Declaration\n\nArrays can be declared as follows:\n\n````\nlet arr = []\n\nlet arr = new Array()```\n````\n\n- JavaScript arrays are resizable and can contain a mix of different data types. (When those characteristics are undesirable, use typed arrays instead.)\n- JavaScript arrays are not associative arrays and so, array elements cannot be accessed using strings as indexes, but must be accessed using integers as indexes.\n- JavaScript arrays are zero-indexed: the first element of an array is at index 0, the second is at index 1, and so on — and the last element is at the value of the array's length property minus 1.\n- JavaScript array-copy operations create shallow copies. (All standard built-in copy operations with any JavaScript objects create shallow copies, rather than deep copies).\n\n### Array Methods\n\n| Method        | Description                                                                      |\n| ------------- | -------------------------------------------------------------------------------- |\n| concat()      | Joins two or more arrays, and returns a copy of the joined arrays                |\n| copyWithin()  | Copies array elements within the array, to and from specified positions          |\n| entries()     | Returns a key/value pair Array Iteration Object                                  |\n| every()       | Checks if every element in an array pass a test                                  |\n| fill()        | Fill the elements in an array with a static value                                |\n| filter()      | Creates a new array with every element in an array that pass a test              |\n| find()        | Returns the value of the first element in an array that pass a test              |\n| findIndex()   | Returns the index of the first element in an array that pass a test              |\n| forEach()     | Calls a function for each array element                                          |\n| from()        | Creates an array from an object                                                  |\n| includes()    | Check if an array contains the specified element                                 |\n| indexOf()     | Search the array for an element and returns its position                         |\n| isArray()     | Checks whether an object is an array                                             |\n| join()        | Joins all elements of an array into a string                                     |\n| keys()        | Returns a Array Iteration Object, containing the keys of the original array      |\n| lastIndexOf() | Search the array for an element, starting at the end, and returns its position   |\n| map()         | Creates a new array with the result of calling a function for each array element |\n| pop()         | Removes the last element of an array, and returns that element                   |\n| push()        | Adds new elements to the end of an array, and returns the new length             |\n| reduce()      | Reduce the values of an array to a single value (going left-to-right)            |\n| reduceRight() | Reduce the values of an array to a single value (going right-to-left)            |\n| reverse()     | Reverses the order of the elements in an array                                   |\n| shift()       | Removes the first element of an array, and returns that element                  |\n| slice()       | Selects a part of an array, and returns the new array                            |\n| some()        | Checks if any of the elements in an array pass a test                            |\n| sort()        | Sorts the elements of an array                                                   |\n| splice()      | Adds/Removes elements from an array                                              |\n| toString()    | Converts an array to a string, and returns the result                            |\n| unshift()     | Adds new elements to the beginning of an array, and returns the new length       |\n| valueOf()     | Returns the primitive value of an array                                          |\n","n":0.042}}},{"i":21,"$":{"0":{"v":"2d Arrays","n":0.707},"1":{"v":"\nExample of 2d Array\n\n```\nconst arr =\n [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n```\n\nor to better visualize.\n\n```\nconst arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n```\n","n":0.183}}},{"i":22,"$":{"0":{"v":"Algorithms","n":1},"1":{"v":"\n### Algorithms\n\n```const foo: (n : number) => void = (n) => {\n    if (n <= 0) return;\n    console.log('bar!');\n    return foo(n - 1);\n}\n```\n\nfoo(5)\n\n- The output of this function would be as follows:\n  ```\n  (5) foo(5)\n   |\n   |\n  (4) foo(4)\n   |\n   |\n  (3) foo(3)\n   |\n   |\n  (2) foo(2)\n   |\n   |\n  (1) base case\n  ```\n\n- Because each function call is determined by the number passed into the recursive function, this function has a time complexity of O(n).\n- When we analyze the space complexity of a recursive function, we should include any additional stack space that the function calls take up. When we make a recursive call, we add that to the stack. Since we have (n) different functions calls before we hit our base case, this function has an O(n) space complexity.","n":0.088}}},{"i":23,"$":{"0":{"v":"Dynamic Programming","n":0.707},"1":{"v":"\n### Resources\n\n[8 time complexities that every programmer should know](https://adrianmejia.com/most-popular-algorithms-time-complexity-every-programmer-should-know-free-online-tutorial-course/)\nThings to learn for DP.\n[MIT Open Courseware Dynamic Programming](https://youtu.be/OQ5jsbhAv_M)\n\n1. Recursion\n2. Memoization\n3. Binary Trees\n","n":0.218}}},{"i":24,"$":{"0":{"v":"Asymptotic Analysis","n":0.707}}}]}
