{"pageProps":{"note":{"id":"PyvdYfaoqUE9wikvRsPfJ","title":"Types","desc":"","updated":1641101464109,"created":1640997047882,"custom":{},"fname":"Typescript.Types","type":"note","vault":{"fsPath":"vault"},"contentHash":"5e74b12d23d25101faa3d29ca0c054ac","links":[],"anchors":{"contents":{"type":"header","text":"Contents","value":"contents","line":8,"column":0,"depth":2},"tips":{"type":"header","text":"Tips","value":"tips","line":23,"column":0,"depth":3},"output":{"type":"header","text":"Output","value":"output","line":35,"column":0,"depth":3},"unions":{"type":"header","text":"Unions","value":"unions","line":47,"column":0,"depth":3},"top":{"type":"header","text":"Top","value":"top","line":63,"column":0,"depth":4},"booleans":{"type":"header","text":"Booleans","value":"booleans","line":67,"column":0,"depth":3},"declaration":{"type":"header","text":"Declaration","value":"declaration","line":71,"column":0,"depth":4},"usage":{"type":"header","text":"Usage","value":"usage","line":77,"column":0,"depth":4},"top-1":{"type":"header","text":"Top","value":"top-1","line":91,"column":0,"depth":4},"strings":{"type":"header","text":"Strings","value":"strings","line":95,"column":0,"depth":3},"declaration-1":{"type":"header","text":"Declaration","value":"declaration-1","line":99,"column":0,"depth":4},"usage-1":{"type":"header","text":"Usage","value":"usage-1","line":105,"column":0,"depth":4},"top-2":{"type":"header","text":"Top","value":"top-2","line":114,"column":0,"depth":4},"arrays":{"type":"header","text":"Arrays","value":"arrays","line":116,"column":0,"depth":3},"declaration-2":{"type":"header","text":"Declaration","value":"declaration-2","line":120,"column":0,"depth":4},"usage-2":{"type":"header","text":"Usage","value":"usage-2","line":126,"column":0,"depth":4},"top-3":{"type":"header","text":"Top","value":"top-3","line":144,"column":0,"depth":4},"tuple":{"type":"header","text":"Tuple","value":"tuple","line":148,"column":0,"depth":3},"declaration-3":{"type":"header","text":"Declaration","value":"declaration-3","line":152,"column":0,"depth":4},"usage-3":{"type":"header","text":"Usage","value":"usage-3","line":158,"column":0,"depth":4},"top-4":{"type":"header","text":"Top","value":"top-4","line":168,"column":0,"depth":4},"enum":{"type":"header","text":"Enum","value":"enum","line":172,"column":0,"depth":3},"declaration-4":{"type":"header","text":"Declaration","value":"declaration-4","line":176,"column":0,"depth":4},"usage-4":{"type":"header","text":"Usage","value":"usage-4","line":188,"column":0,"depth":3},"output-1":{"type":"header","text":"Output:","value":"output-1","line":203,"column":0,"depth":4},"output-2":{"type":"header","text":"Output","value":"output-2","line":224,"column":0,"depth":3},"top-5":{"type":"header","text":"Top","value":"top-5","line":230,"column":0,"depth":4},"unknown":{"type":"header","text":"Unknown","value":"unknown","line":234,"column":0,"depth":3},"declaration-5":{"type":"header","text":"Declaration","value":"declaration-5","line":240,"column":0,"depth":4},"usage-5":{"type":"header","text":"Usage","value":"usage-5","line":246,"column":0,"depth":4},"output-3":{"type":"header","text":"Output","value":"output-3","line":256,"column":0,"depth":3},"top-6":{"type":"header","text":"Top","value":"top-6","line":262,"column":0,"depth":4},"any":{"type":"header","text":"Any","value":"any","line":266,"column":0,"depth":3},"declaration-6":{"type":"header","text":"Declaration","value":"declaration-6","line":270,"column":0,"depth":4},"usage-6":{"type":"header","text":"Usage","value":"usage-6","line":276,"column":0,"depth":4},"top-7":{"type":"header","text":"Top","value":"top-7","line":295,"column":0,"depth":4},"void":{"type":"header","text":"Void","value":"void","line":299,"column":0,"depth":3},"declaration-7":{"type":"header","text":"Declaration","value":"declaration-7","line":305,"column":0,"depth":4},"usage-7":{"type":"header","text":"Usage","value":"usage-7","line":312,"column":0,"depth":4},"output-4":{"type":"header","text":"Output","value":"output-4","line":323,"column":0,"depth":3},"top-8":{"type":"header","text":"Top","value":"top-8","line":329,"column":0,"depth":4},"null":{"type":"header","text":"Null","value":"null","line":333,"column":0,"depth":3},"declaration-8":{"type":"header","text":"Declaration","value":"declaration-8","line":337,"column":0,"depth":4},"usage-8":{"type":"header","text":"Usage","value":"usage-8","line":343,"column":0,"depth":4},"output-5":{"type":"header","text":"Output","value":"output-5","line":353,"column":0,"depth":3},"top-9":{"type":"header","text":"Top","value":"top-9","line":359,"column":0,"depth":4},"never":{"type":"header","text":"Never","value":"never","line":363,"column":0,"depth":3},"declaration-9":{"type":"header","text":"Declaration","value":"declaration-9","line":369,"column":0,"depth":4},"top-10":{"type":"header","text":"Top","value":"top-10","line":377,"column":0,"depth":4},"object":{"type":"header","text":"Object","value":"object","line":381,"column":0,"depth":3},"declaration-10":{"type":"header","text":"Declaration","value":"declaration-10","line":385,"column":0,"depth":4},"usage-9":{"type":"header","text":"Usage","value":"usage-9","line":396,"column":0,"depth":4},"note":{"type":"header","text":"Note","value":"note","line":410,"column":0,"depth":3},"or":{"type":"header","text":"Or","value":"or","line":428,"column":0,"depth":3},"top-11":{"type":"header","text":"Top","value":"top-11","line":440,"column":0,"depth":4},"back":{"type":"header","text":"Back","value":"back","line":444,"column":0,"depth":3}},"children":[],"parent":"m41bS3zCQX1qEK2y2GD03","data":{}},"body":"<h1 id=\"types\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#types\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Types</h1>\n<h2 id=\"contents\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#contents\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><strong><a id=\"Contents\">Contents</a></strong></h2>\n<ol>\n<li><a href=\"#Unions\">Unions</a></li>\n<li><a href=\"#Booleans\">Booleans</a></li>\n<li><a href=\"#Strings\">Strings</a></li>\n<li><a href=\"#Arrays\">Arrays</a></li>\n<li><a href=\"#Tuple\">Tuple</a></li>\n<li><a href=\"#Enum\">Enum</a></li>\n<li><a href=\"#Unknown\">Unknown</a></li>\n<li><a href=\"#Any\">Any</a></li>\n<li><a href=\"#Void\">Void</a></li>\n<li><a href=\"#Null\">Null</a></li>\n<li><a href=\"#Never\">Never</a></li>\n<li><a href=\"#Object\">Object</a></li>\n</ol>\n<h3 id=\"tips\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#tips\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><strong><a id=\"Tips\">Tips</a></strong></h3>\n<p><strong>1. To learn the type of a variable, use typeof</strong></p>\n<pre><code>import axios from 'axios';\n(async () => {\n    const data = await axios.get('https://pokeapi.co/api/v2/pokemon/1');\nconsole.log(data.data.species, typeof data.data.species.name);\n})();\n</code></pre>\n<h3 id=\"output\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#output\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Output</h3>\n<pre><code>{\n     name: 'bulbasaur',\n     url: 'https://pokeapi.co/api/v2/pokemon-species/1/'\n}\nstring\n</code></pre>\n<hr>\n<h3 id=\"unions\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#unions\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><strong><a id=\"Unions\">Unions</a></strong></h3>\n<p>With a union, you can declare that a type could be one of many types. For example, you can describe a boolean type as being either true or false:</p>\n<p><code>type MyBool = true | false;</code></p>\n<p>Note: If you hover over MyBool, you’ll see that it is classed as boolean. That’s a property of the Structural Type System. More on this below.</p>\n<p>A popular use-case for union types is to describe the set of string or number literals that a value is allowed to be:</p>\n<pre><code>type WindowStates = \"open\" | \"closed\" | \"minimized\";\ntype LockStates = \"locked\" | \"unlocked\";\ntype PositiveOddNumbersUnderTen = 1 | 3 | 5 | 7 | 9;\n</code></pre>\n<h4 id=\"top\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#top\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><a href=\"#Contents\">Top</a></h4>\n<hr>\n<h3 id=\"booleans\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#booleans\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><strong><a id=\"Boolean\">Booleans</a></strong></h3>\n<hr>\n<h4 id=\"declaration\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#declaration\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Declaration</h4>\n<pre><code>let tired: boolean = true;\n</code></pre>\n<h4 id=\"usage\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#usage\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Usage</h4>\n<pre><code>(() => {\n    let tired: boolean = true;\n    if(tired){\n        console.log(\"I am tired\");\n    } else {\n        console.log(`I'm not that tired!`)\n    }\n})()\n\n</code></pre>\n<h4 id=\"top-1\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#top-1\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><a href=\"#Contents\">Top</a></h4>\n<hr>\n<h3 id=\"strings\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#strings\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><strong><a id=\"Strings\">Strings</a></strong></h3>\n<hr>\n<h4 id=\"declaration-1\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#declaration-1\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Declaration</h4>\n<pre><code>let name: string = 'Aaron';\n</code></pre>\n<h4 id=\"usage-1\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#usage-1\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Usage</h4>\n<pre><code>(() => {\n    let name: string = 'Aaron';\n    console.log(name);\n})()\n</code></pre>\n<h4 id=\"top-2\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#top-2\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><a href=\"#Contents\">Top</a></h4>\n<h3 id=\"arrays\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#arrays\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><strong><a id=\"Arrays\">Arrays</a></strong></h3>\n<hr>\n<h4 id=\"declaration-2\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#declaration-2\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Declaration</h4>\n<pre><code>let names: string[] = ['Aaron', 'Eric'];\n</code></pre>\n<h4 id=\"usage-2\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#usage-2\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Usage</h4>\n<pre><code>(() => {\n    let names: string[] = ['Aaron', 'Eric', 'John', 'Michael'];\n    console.log(names);\n})()\n</code></pre>\n<ul>\n<li>You can also use generic array types ie:</li>\n</ul>\n<pre><code>(() => {\n    let names: Array&#x3C;string> = ['Aaron', 'Eric', 'John', 'Michael'];\n    console.log(names);\n})()\n</code></pre>\n<h4 id=\"top-3\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#top-3\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><a href=\"#Contents\">Top</a></h4>\n<hr>\n<h3 id=\"tuple\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#tuple\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><strong><a id=\"Tuple\">Tuple</a></strong></h3>\n<hr>\n<h4 id=\"declaration-3\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#declaration-3\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Declaration</h4>\n<pre><code>let x: [string, string, number];\n</code></pre>\n<h4 id=\"usage-3\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#usage-3\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Usage</h4>\n<pre><code>(() => {\n    let x: [string, string, number];\n    x = [\"New Year\", 'Sunday', 31];\n    console.log(x);\n})()\n</code></pre>\n<h4 id=\"top-4\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#top-4\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><a href=\"#Contents\">Top</a></h4>\n<hr>\n<h3 id=\"enum\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#enum\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><strong><a id=\"Enum\">Enum</a></strong></h3>\n<hr>\n<h4 id=\"declaration-4\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#declaration-4\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Declaration</h4>\n<ul>\n<li>An enum is a way of giving more friendly names to sets of numeric values. (numeric values will default if not implicitly set)</li>\n</ul>\n<pre><code>enum SaiyanLevel {\n    SSJ = 1, //1\n    SSJ2, //2\n    SSJ3 //3\n}\n</code></pre>\n<h3 id=\"usage-4\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#usage-4\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Usage</h3>\n<pre><code>(() => {\n    enum SaiyanLevels {\n        SSJ,\n        SSJ2,\n        SSJ3,\n        SSJ4,\n    }\n    let s:SaiyanLevels = SaiyanLevels.SSJ4;\n    console.log(s);\n})()\n</code></pre>\n<h4 id=\"output-1\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#output-1\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Output:</h4>\n<pre><code>4\n</code></pre>\n<ul>\n<li>You are also able to print the name of a specific value of an enum.</li>\n</ul>\n<pre><code>(() => {\n    enum SaiyanLevels {\n        SSJ,\n        SSJ2,\n        SSJ3,\n        SSJ4,\n    }\n    let s:string = SaiyanLevels[3];\n    console.log(s);\n})()\n</code></pre>\n<h3 id=\"output-2\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#output-2\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Output</h3>\n<pre><code>SSJ4\n</code></pre>\n<h4 id=\"top-5\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#top-5\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><a href=\"#Contents\">Top</a></h4>\n<hr>\n<h3 id=\"unknown\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#unknown\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><a id=\"Unknown\"><strong>Unknown</strong></a></h3>\n<hr>\n<p>For variables that the type is unknown</p>\n<h4 id=\"declaration-5\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#declaration-5\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Declaration</h4>\n<pre><code>const value: unknown = 5;\n</code></pre>\n<h4 id=\"usage-5\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#usage-5\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Usage</h4>\n<pre><code>(() => {\n  const value: unknown = 5;\n  console.log(value);\n})();\n\n</code></pre>\n<h3 id=\"output-3\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#output-3\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Output</h3>\n<pre><code>5\n</code></pre>\n<h4 id=\"top-6\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#top-6\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><a href=\"#Contents\">Top</a></h4>\n<hr>\n<h3 id=\"any\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#any\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><a id=\"Any\"><strong>Any</strong></a></h3>\n<hr>\n<h4 id=\"declaration-6\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#declaration-6\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Declaration</h4>\n<pre><code>let name: any = 'Din Djarin';\n</code></pre>\n<h4 id=\"usage-6\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#usage-6\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Usage</h4>\n<pre><code>(() => {\n  let mandoParty: any = {\n    leader: 'Din Djarin',\n    members: ['Grogu', 'Ahsoka']\n  };\n\n  /*   None of the following lines of code will throw compiler errors.\n  Using `any` disables all further type checking, and it is assumed\n  you know the environment better than TypeScript. */\n\n  mandoParty.foo(); // method does not exist, just here for example.\n  mandoParty.transportation = 'ship';\n  const test: number = mandoParty;\n})();\n</code></pre>\n<h4 id=\"top-7\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#top-7\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><a href=\"#Contents\">Top</a></h4>\n<hr>\n<h3 id=\"void\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#void\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><a id=\"Void\"><strong>Void</strong></a></h3>\n<hr>\n<p>Void type is a function which returns <code>undefined</code> or has no return value</p>\n<h4 id=\"declaration-7\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#declaration-7\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Declaration</h4>\n<pre><code>const value: void = undefined;\n\n</code></pre>\n<h4 id=\"usage-7\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#usage-7\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Usage</h4>\n<pre><code>(() => {\n  const value: void = undefined;\n  const value: void = 1; // error\n  console.log(value);\n})();\n\n</code></pre>\n<h3 id=\"output-4\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#output-4\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Output</h3>\n<pre><code>undefined\n</code></pre>\n<h4 id=\"top-8\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#top-8\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><a href=\"#Contents\">Top</a></h4>\n<hr>\n<h3 id=\"null\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#null\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><a id=\"Null\"><strong>Null</strong></a></h3>\n<hr>\n<h4 id=\"declaration-8\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#declaration-8\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Declaration</h4>\n<pre><code>const value: null = null;\n</code></pre>\n<h4 id=\"usage-8\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#usage-8\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Usage</h4>\n<pre><code>(() => {\n  const value: null = null;\n  console.log(value);\n})();\n\n</code></pre>\n<h3 id=\"output-5\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#output-5\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Output</h3>\n<pre><code>null\n</code></pre>\n<h4 id=\"top-9\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#top-9\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><a href=\"#Contents\">Top</a></h4>\n<hr>\n<h3 id=\"never\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#never\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><a id=\"Never\"><strong>Never</strong></a></h3>\n<p>It’s not possible that this type could happen</p>\n<ul>\n<li>The never type is used when you are sure that something is never going to occur. For example, you write a function which will not return to its end point or always throws an exception.</li>\n</ul>\n<h4 id=\"declaration-9\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#declaration-9\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Declaration</h4>\n<pre><code>const neverFunc = (): never => {\n  throw new Error('never');\n};\n</code></pre>\n<h4 id=\"top-10\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#top-10\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><a href=\"#Contents\">Top</a></h4>\n<hr>\n<h3 id=\"object\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#object\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><a id=\"Object\"><strong>Object</strong></a></h3>\n<hr>\n<h4 id=\"declaration-10\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#declaration-10\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Declaration</h4>\n<pre><code>let myObject: object;\nmyObject = {\n    name: 'Luke Skywalker',\n    alignment: 'Light Side'\n  };\n\n</code></pre>\n<h4 id=\"usage-9\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#usage-9\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Usage</h4>\n<pre><code>(() => {\n  let myObject: object;\n\n  myObject = {\n    name: 'Luke Skywalker',\n    alignment: 'Light Side'\n  };\n  console.log(myObject);\n})();\n</code></pre>\n<h3 id=\"note\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#note\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Note</h3>\n<p>To explicitly specify properties of the <code>employee</code> object, you first use the following syntax to declare the myObject object.</p>\n<pre><code>let myObject: {\n    name: string;\n    alignment: string;\n    };\n// then assign the myObject object to a literal object with the appropriate properties.\n\n    myObject = {\n    name: 'Luke Skywalker',\n    alignment: 'Light Side'\n    };\n\n</code></pre>\n<h3 id=\"or\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#or\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Or</h3>\n<pre><code>let myObject: {\n    name: string;\n    alignment: string;\n    } = {\n    name: 'Luke Skywalker',\n    alignment: 'Light Side'\n    };\n</code></pre>\n<h4 id=\"top-11\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#top-11\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><a href=\"#Contents\">Top</a></h4>\n<hr>\n<h3 id=\"back\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#back\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a><strong><a href=\"./Typescript.md\">Back</a></strong></h3>","noteIndex":{"id":"wn8PE1RhG0znK1alrGFYv","title":"Root","desc":"","updated":1649446047937,"created":1631901573363,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"507d4dbcd7bf14ced7918d640729fe22","links":[{"type":"wiki","from":{"fname":"root","id":"wn8PE1RhG0znK1alrGFYv","vaultName":"vault"},"value":"user.binarystag","alias":"@binarystag","position":{"start":{"line":2,"column":13,"offset":13},"end":{"line":2,"column":24,"offset":24},"indent":[]},"xvault":false,"to":{"fname":"user.binarystag"}}],"anchors":{"my-notes-binarystag":{"type":"header","text":"My notes (@binarystag)","value":"my-notes-binarystag","line":8,"column":0,"depth":1},"sections":{"type":"header","text":"Sections:","value":"sections","line":13,"column":0,"depth":3}},"children":["8fw4xwe5s296cc697g6wdal","tg693e9l5g77psni6defy6h","NUz98ls1bdGed4HXQ0Z4C","Mhv0wNqRgu2h7j3Ws71eo","Te2jPQSZKapqVSsNhw7jA","m41bS3zCQX1qEK2y2GD03","root"],"parent":null,"data":{},"body":"\n# My notes (@binarystag)\n\n[LinkedIn](https://www.linkedin.com/in/aaron-deas-ba9908166/)\n[Github](https://github.com/b00000001)\n\n### Sections:\n\n1. [TypeScript](./Typescript.md)\n2. [Testing](./Testing)\n3. [Database](./Database)\n4. [Gaming](./Gaming)\n5. [Data Structures](./Data_Structures)\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{},"copyNoteLink":{}},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"enableUserTags":true,"enableHashTags":true,"dendronVersion":"0.83.0","enableEditorDecorations":true},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"assetsPrefix":"/My-Dendron-Notes","copyAssets":true,"siteHierarchies":["root"],"enableSiteLastModified":true,"siteRootDir":"docs","siteUrl":"https://b00000001.github.io","enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"writeStubs":false,"seo":{"title":"Dendron","description":"Personal knowledge space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enablePrettyLinks":true,"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}